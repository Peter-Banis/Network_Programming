This file will explain the format of our GOSSIP file structure
Each GOSSIP command has the following form :

GOSSIP:[sha256 base 64 of timestamp+message]:timestamp:message%

Our file will store each GOSSIP message with the following form:

BEGIN
1:message
2:timestamp
3:[sha256 base64]
END
BEGIN
1:message
2:timestamp
3:[sha256 base64]
END
BEGIN
...
END
...

An example file would read
BEGIN
1:Tom eats Jerry
2:2018-01-09-16-18-20-001Z
3:mBHL7IKilvdcOFKR03ASvBNX//ypQkTRUvilYmB1/OY=
END

The purpose of this form is to clearly demark where a message begins and ends. Further, the clear BEGIN/END sentinels allow easy processing. For example, if we hit END without finding all three components, we can log an error in the file. The error in this entry is self contained and will not contaminate other data.
We place a 1/2/3: before the data field in case, however unlikely, any of the components could start with "BEGIN" or "END". For example, if you gossiped the message "END" the file would read 
BEGIN
[sha 256 base 64]
timestamp
END
END

While this error should not be difficult to discover while parsing and account for, we could also have 
BEGIN
[sha 256 base 64]
timestamp
BEGIN
END
and this would be fixed easily, after all all valid gossip messages were placed onto three lines, so simply reading three lines would collect the full message, we use the 1/2/3: for the sake of simplicity.
